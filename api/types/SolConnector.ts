/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export type WithdrawDataSolStruct = {
  tokenAmount: BigNumberish;
  fee: BigNumberish;
  chainId: BigNumberish;
  accountId: BytesLike;
  r: BytesLike;
  s: BytesLike;
  sender: BytesLike;
  receiver: BytesLike;
  withdrawNonce: BigNumberish;
  timestamp: BigNumberish;
  brokerId: string;
  tokenSymbol: string;
};

export type WithdrawDataSolStructOutput = [
  tokenAmount: bigint,
  fee: bigint,
  chainId: bigint,
  accountId: string,
  r: string,
  s: string,
  sender: string,
  receiver: string,
  withdrawNonce: bigint,
  timestamp: bigint,
  brokerId: string,
  tokenSymbol: string
] & {
  tokenAmount: bigint;
  fee: bigint;
  chainId: bigint;
  accountId: string;
  r: string;
  s: string;
  sender: string;
  receiver: string;
  withdrawNonce: bigint;
  timestamp: bigint;
  brokerId: string;
  tokenSymbol: string;
};

export type Withdraw2ContractV2Struct = {
  tokenAmount: BigNumberish;
  fee: BigNumberish;
  chainType: BigNumberish;
  chainId: BigNumberish;
  accountId: BytesLike;
  vaultType: BigNumberish;
  sender: BytesLike;
  withdrawNonce: BigNumberish;
  receiver: BytesLike;
  timestamp: BigNumberish;
  brokerHash: BytesLike;
  tokenHash: BytesLike;
  clientId: BigNumberish;
};

export type Withdraw2ContractV2StructOutput = [
  tokenAmount: bigint,
  fee: bigint,
  chainType: bigint,
  chainId: bigint,
  accountId: string,
  vaultType: bigint,
  sender: string,
  withdrawNonce: bigint,
  receiver: string,
  timestamp: bigint,
  brokerHash: string,
  tokenHash: string,
  clientId: bigint
] & {
  tokenAmount: bigint;
  fee: bigint;
  chainType: bigint;
  chainId: bigint;
  accountId: string;
  vaultType: bigint;
  sender: string;
  withdrawNonce: bigint;
  receiver: string;
  timestamp: bigint;
  brokerHash: string;
  tokenHash: string;
  clientId: bigint;
};

export interface SolConnectorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BROKER_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SYMBOL_MANAGER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "allowInitializePath"
      | "brokerHash2Index"
      | "brokerIndex2Hash"
      | "convertDecimal"
      | "convertDepositDecimals"
      | "convertWithdrawDecimals"
      | "endpoint"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "inboundNonce"
      | "initialize"
      | "isComposeMsgSender"
      | "ledger"
      | "lzReceive"
      | "msgOptions"
      | "nextNonce"
      | "oAppVersion"
      | "orderDelivery"
      | "owner"
      | "pause"
      | "paused"
      | "peers"
      | "proxiableUUID"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setBrokerHash2Index"
      | "setDelegate"
      | "setLedger"
      | "setOptions"
      | "setOrderDelivery"
      | "setPeer"
      | "setPeers"
      | "setSolEid"
      | "setTokenDecimalsOnOrderly"
      | "setTokenDecimalsOnSolana"
      | "setTokenHash2Index"
      | "solEid"
      | "supportsInterface"
      | "tokenDecimalsOnOrderly"
      | "tokenDecimalsOnSolana"
      | "tokenHash2Index"
      | "tokenIndex2Hash"
      | "transferOwnership"
      | "unpause"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdraw2ContractV2"
      | "withdrawNativeToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "PeerSet"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetBrokerHashToIndex"
      | "SetOrderDelivery"
      | "SetTokenDecimalsOnOrderly"
      | "SetTokenDecimalsOnSolana"
      | "SetTokenHashToIndex"
      | "UnkonwnMessageType"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BROKER_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerHash2Index",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerIndex2Hash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDecimal",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDepositDecimals",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertWithdrawDecimals",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inboundNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [OriginStruct, BytesLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "msgOptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderDelivery",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBrokerHash2Index",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLedger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptions",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderDelivery",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeers",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolEid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDecimalsOnOrderly",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDecimalsOnSolana",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenHash2Index",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "solEid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimalsOnOrderly",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimalsOnSolana",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHash2Index",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndex2Hash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawDataSolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw2ContractV2",
    values: [Withdraw2ContractV2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNativeToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BROKER_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerHash2Index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerIndex2Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDecimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDepositDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertWithdrawDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "msgOptions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBrokerHash2Index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLedger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOptions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOrderDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPeers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSolEid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDecimalsOnOrderly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDecimalsOnSolana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenHash2Index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solEid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimalsOnOrderly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimalsOnSolana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenHash2Index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndex2Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw2ContractV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNativeToken",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerSetEvent {
  export type InputTuple = [eid: BigNumberish, peer: BytesLike];
  export type OutputTuple = [eid: bigint, peer: string];
  export interface OutputObject {
    eid: bigint;
    peer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBrokerHashToIndexEvent {
  export type InputTuple = [
    brokerHash: BytesLike,
    _oldIndex: BigNumberish,
    _newIndex: BigNumberish
  ];
  export type OutputTuple = [
    brokerHash: string,
    _oldIndex: bigint,
    _newIndex: bigint
  ];
  export interface OutputObject {
    brokerHash: string;
    _oldIndex: bigint;
    _newIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOrderDeliveryEvent {
  export type InputTuple = [orderDelivery: boolean, inboundNonce: BigNumberish];
  export type OutputTuple = [orderDelivery: boolean, inboundNonce: bigint];
  export interface OutputObject {
    orderDelivery: boolean;
    inboundNonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenDecimalsOnOrderlyEvent {
  export type InputTuple = [tokenHash: BytesLike, decimals: BigNumberish];
  export type OutputTuple = [tokenHash: string, decimals: bigint];
  export interface OutputObject {
    tokenHash: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenDecimalsOnSolanaEvent {
  export type InputTuple = [tokenHash: BytesLike, decimals: BigNumberish];
  export type OutputTuple = [tokenHash: string, decimals: bigint];
  export interface OutputObject {
    tokenHash: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenHashToIndexEvent {
  export type InputTuple = [
    tokenHash: BytesLike,
    _oldIndex: BigNumberish,
    _newIndex: BigNumberish
  ];
  export type OutputTuple = [
    tokenHash: string,
    _oldIndex: bigint,
    _newIndex: bigint
  ];
  export interface OutputObject {
    tokenHash: string;
    _oldIndex: bigint;
    _newIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnkonwnMessageTypeEvent {
  export type InputTuple = [msgType: BigNumberish];
  export type OutputTuple = [msgType: bigint];
  export interface OutputObject {
    msgType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SolConnector extends BaseContract {
  connect(runner?: ContractRunner | null): SolConnector;
  waitForDeployment(): Promise<this>;

  interface: SolConnectorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BROKER_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SYMBOL_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  allowInitializePath: TypedContractMethod<
    [origin: OriginStruct],
    [boolean],
    "view"
  >;

  brokerHash2Index: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  brokerIndex2Hash: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  convertDecimal: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      srcDecimal: BigNumberish,
      dstDecimal: BigNumberish
    ],
    [bigint],
    "view"
  >;

  convertDepositDecimals: TypedContractMethod<
    [_tokenHash: BytesLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;

  convertWithdrawDecimals: TypedContractMethod<
    [_tokenHash: BytesLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  inboundNonce: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [_lzEndpoint: AddressLike, _delegate: AddressLike, _solEid: BigNumberish],
    [void],
    "nonpayable"
  >;

  isComposeMsgSender: TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;

  ledger: TypedContractMethod<[], [string], "view">;

  lzReceive: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  msgOptions: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { gas: bigint; value: bigint }],
    "view"
  >;

  nextNonce: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;

  oAppVersion: TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;

  orderDelivery: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  peers: TypedContractMethod<[eid: BigNumberish], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setBrokerHash2Index: TypedContractMethod<
    [_brokerHash: BytesLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  setLedger: TypedContractMethod<[_ledger: AddressLike], [void], "nonpayable">;

  setOptions: TypedContractMethod<
    [_msgType: BigNumberish, _gas: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOrderDelivery: TypedContractMethod<
    [_orderDelivery: boolean, _inboundNonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;

  setPeers: TypedContractMethod<
    [_eids: BigNumberish[], _peers: BytesLike[]],
    [void],
    "nonpayable"
  >;

  setSolEid: TypedContractMethod<[_solEid: BigNumberish], [void], "nonpayable">;

  setTokenDecimalsOnOrderly: TypedContractMethod<
    [_tokenHash: BytesLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenDecimalsOnSolana: TypedContractMethod<
    [_tokenHash: BytesLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenHash2Index: TypedContractMethod<
    [_tokenHash: BytesLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;

  solEid: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenDecimalsOnOrderly: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  tokenDecimalsOnSolana: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  tokenHash2Index: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  tokenIndex2Hash: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [_withdrawData: WithdrawDataSolStruct],
    [void],
    "nonpayable"
  >;

  withdraw2ContractV2: TypedContractMethod<
    [_withdraw2ContractV2Data: Withdraw2ContractV2Struct],
    [void],
    "nonpayable"
  >;

  withdrawNativeToken: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BROKER_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SYMBOL_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowInitializePath"
  ): TypedContractMethod<[origin: OriginStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "brokerHash2Index"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "brokerIndex2Hash"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "convertDecimal"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      srcDecimal: BigNumberish,
      dstDecimal: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertDepositDecimals"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertWithdrawDecimals"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "inboundNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_lzEndpoint: AddressLike, _delegate: AddressLike, _solEid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isComposeMsgSender"
  ): TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ledger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "msgOptions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { gas: bigint; value: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextNonce"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "oAppVersion"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderDelivery"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "peers"
  ): TypedContractMethod<[eid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBrokerHash2Index"
  ): TypedContractMethod<
    [_brokerHash: BytesLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLedger"
  ): TypedContractMethod<[_ledger: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOptions"
  ): TypedContractMethod<
    [_msgType: BigNumberish, _gas: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOrderDelivery"
  ): TypedContractMethod<
    [_orderDelivery: boolean, _inboundNonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPeers"
  ): TypedContractMethod<
    [_eids: BigNumberish[], _peers: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSolEid"
  ): TypedContractMethod<[_solEid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenDecimalsOnOrderly"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenDecimalsOnSolana"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenHash2Index"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "solEid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenDecimalsOnOrderly"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenDecimalsOnSolana"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenHash2Index"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenIndex2Hash"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_withdrawData: WithdrawDataSolStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw2ContractV2"
  ): TypedContractMethod<
    [_withdraw2ContractV2Data: Withdraw2ContractV2Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNativeToken"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PeerSet"
  ): TypedContractEvent<
    PeerSetEvent.InputTuple,
    PeerSetEvent.OutputTuple,
    PeerSetEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetBrokerHashToIndex"
  ): TypedContractEvent<
    SetBrokerHashToIndexEvent.InputTuple,
    SetBrokerHashToIndexEvent.OutputTuple,
    SetBrokerHashToIndexEvent.OutputObject
  >;
  getEvent(
    key: "SetOrderDelivery"
  ): TypedContractEvent<
    SetOrderDeliveryEvent.InputTuple,
    SetOrderDeliveryEvent.OutputTuple,
    SetOrderDeliveryEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenDecimalsOnOrderly"
  ): TypedContractEvent<
    SetTokenDecimalsOnOrderlyEvent.InputTuple,
    SetTokenDecimalsOnOrderlyEvent.OutputTuple,
    SetTokenDecimalsOnOrderlyEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenDecimalsOnSolana"
  ): TypedContractEvent<
    SetTokenDecimalsOnSolanaEvent.InputTuple,
    SetTokenDecimalsOnSolanaEvent.OutputTuple,
    SetTokenDecimalsOnSolanaEvent.OutputObject
  >;
  getEvent(
    key: "SetTokenHashToIndex"
  ): TypedContractEvent<
    SetTokenHashToIndexEvent.InputTuple,
    SetTokenHashToIndexEvent.OutputTuple,
    SetTokenHashToIndexEvent.OutputObject
  >;
  getEvent(
    key: "UnkonwnMessageType"
  ): TypedContractEvent<
    UnkonwnMessageTypeEvent.InputTuple,
    UnkonwnMessageTypeEvent.OutputTuple,
    UnkonwnMessageTypeEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PeerSet(uint32,bytes32)": TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
    PeerSet: TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetBrokerHashToIndex(bytes32,uint16,uint16)": TypedContractEvent<
      SetBrokerHashToIndexEvent.InputTuple,
      SetBrokerHashToIndexEvent.OutputTuple,
      SetBrokerHashToIndexEvent.OutputObject
    >;
    SetBrokerHashToIndex: TypedContractEvent<
      SetBrokerHashToIndexEvent.InputTuple,
      SetBrokerHashToIndexEvent.OutputTuple,
      SetBrokerHashToIndexEvent.OutputObject
    >;

    "SetOrderDelivery(bool,uint64)": TypedContractEvent<
      SetOrderDeliveryEvent.InputTuple,
      SetOrderDeliveryEvent.OutputTuple,
      SetOrderDeliveryEvent.OutputObject
    >;
    SetOrderDelivery: TypedContractEvent<
      SetOrderDeliveryEvent.InputTuple,
      SetOrderDeliveryEvent.OutputTuple,
      SetOrderDeliveryEvent.OutputObject
    >;

    "SetTokenDecimalsOnOrderly(bytes32,uint128)": TypedContractEvent<
      SetTokenDecimalsOnOrderlyEvent.InputTuple,
      SetTokenDecimalsOnOrderlyEvent.OutputTuple,
      SetTokenDecimalsOnOrderlyEvent.OutputObject
    >;
    SetTokenDecimalsOnOrderly: TypedContractEvent<
      SetTokenDecimalsOnOrderlyEvent.InputTuple,
      SetTokenDecimalsOnOrderlyEvent.OutputTuple,
      SetTokenDecimalsOnOrderlyEvent.OutputObject
    >;

    "SetTokenDecimalsOnSolana(bytes32,uint128)": TypedContractEvent<
      SetTokenDecimalsOnSolanaEvent.InputTuple,
      SetTokenDecimalsOnSolanaEvent.OutputTuple,
      SetTokenDecimalsOnSolanaEvent.OutputObject
    >;
    SetTokenDecimalsOnSolana: TypedContractEvent<
      SetTokenDecimalsOnSolanaEvent.InputTuple,
      SetTokenDecimalsOnSolanaEvent.OutputTuple,
      SetTokenDecimalsOnSolanaEvent.OutputObject
    >;

    "SetTokenHashToIndex(bytes32,uint8,uint8)": TypedContractEvent<
      SetTokenHashToIndexEvent.InputTuple,
      SetTokenHashToIndexEvent.OutputTuple,
      SetTokenHashToIndexEvent.OutputObject
    >;
    SetTokenHashToIndex: TypedContractEvent<
      SetTokenHashToIndexEvent.InputTuple,
      SetTokenHashToIndexEvent.OutputTuple,
      SetTokenHashToIndexEvent.OutputObject
    >;

    "UnkonwnMessageType(uint8)": TypedContractEvent<
      UnkonwnMessageTypeEvent.InputTuple,
      UnkonwnMessageTypeEvent.OutputTuple,
      UnkonwnMessageTypeEvent.OutputObject
    >;
    UnkonwnMessageType: TypedContractEvent<
      UnkonwnMessageTypeEvent.InputTuple,
      UnkonwnMessageTypeEvent.OutputTuple,
      UnkonwnMessageTypeEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
