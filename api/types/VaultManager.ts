/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RebalanceTypes {
  export type RebalanceBurnUploadDataStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
  };

  export type RebalanceBurnUploadDataStructOutput = [
    r: string,
    s: string,
    v: bigint,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint
  ] & {
    r: string;
    s: string;
    v: bigint;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
  };

  export type RebalanceMintUploadDataStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
    messageBytes: BytesLike;
    messageSignature: BytesLike;
  };

  export type RebalanceMintUploadDataStructOutput = [
    r: string,
    s: string,
    v: bigint,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint,
    messageBytes: string,
    messageSignature: string
  ] & {
    r: string;
    s: string;
    v: bigint;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
    messageBytes: string;
    messageSignature: string;
  };

  export type RebalanceStatusStruct = {
    rebalanceId: BigNumberish;
    burnStatus: BigNumberish;
    mintStatus: BigNumberish;
  };

  export type RebalanceStatusStructOutput = [
    rebalanceId: bigint,
    burnStatus: bigint,
    mintStatus: bigint
  ] & { rebalanceId: bigint; burnStatus: bigint; mintStatus: bigint };

  export type RebalanceBurnCCFinishDataStruct = {
    success: boolean;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
  };

  export type RebalanceBurnCCFinishDataStructOutput = [
    success: boolean,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint
  ] & {
    success: boolean;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
  };

  export type RebalanceMintCCFinishDataStruct = {
    success: boolean;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
  };

  export type RebalanceMintCCFinishDataStructOutput = [
    success: boolean,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint
  ] & {
    success: boolean;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
  };
}

export interface VaultManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BROKER_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SYMBOL_MANAGER_ROLE"
      | "addBalance"
      | "allowedChainToken"
      | "applyDeltaBalance"
      | "chain2VaultAddress"
      | "chain2cctpDomain"
      | "executeRebalanceBurn"
      | "executeRebalanceMint"
      | "finishFrozenBalance"
      | "frozenBalance"
      | "getAllAllowedBroker"
      | "getAllAllowedSymbol"
      | "getAllAllowedToken"
      | "getAllowedBroker"
      | "getAllowedChainToken"
      | "getAllowedSymbol"
      | "getAllowedToken"
      | "getBalance"
      | "getFrozenBalance"
      | "getMaxWithdrawFee"
      | "getProtocolVaultAddress"
      | "getRebalanceStatus"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "ledgerAddress"
      | "maxWithdrawFee"
      | "owner"
      | "rebalanceBurnFinish"
      | "rebalanceMintFinish"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setAllowedBroker"
      | "setAllowedChainToken"
      | "setAllowedSymbol"
      | "setAllowedToken"
      | "setChain2cctpMeta"
      | "setLedgerAddress"
      | "setMaxWithdrawFee"
      | "setProtocolVaultAddress"
      | "subBalance"
      | "tokenBalanceOnchain"
      | "tokenBurnFrozenBalanceOnchain"
      | "tokenFrozenBalanceOnchain"
      | "transferOwnership"
      | "unfrozenBalance"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeLedger"
      | "Initialized"
      | "OwnershipTransferred"
      | "RebalanceBurn"
      | "RebalanceBurnResult"
      | "RebalanceMint"
      | "RebalanceMintResult"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetAllowedBroker"
      | "SetAllowedChainToken"
      | "SetAllowedSymbol"
      | "SetAllowedToken"
      | "SetMaxWithdrawFee"
      | "SetProtocolVaultAddress"
      | "SetSymbolManager"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BROKER_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBalance",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedChainToken",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyDeltaBalance",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chain2VaultAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chain2cctpDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRebalanceBurn",
    values: [RebalanceTypes.RebalanceBurnUploadDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRebalanceMint",
    values: [RebalanceTypes.RebalanceMintUploadDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finishFrozenBalance",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frozenBalance",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAllowedBroker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAllowedSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAllowedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedBroker",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedChainToken",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedSymbol",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFrozenBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxWithdrawFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRebalanceStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ledgerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceBurnFinish",
    values: [RebalanceTypes.RebalanceBurnCCFinishDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceMintFinish",
    values: [RebalanceTypes.RebalanceMintCCFinishDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedBroker",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedChainToken",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSymbol",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToken",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChain2cctpMeta",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLedgerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWithdrawFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolVaultAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subBalance",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalanceOnchain",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBurnFrozenBalanceOnchain",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFrozenBalanceOnchain",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unfrozenBalance",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BROKER_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedChainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyDeltaBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chain2VaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chain2cctpDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRebalanceBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRebalanceMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishFrozenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAllowedBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAllowedSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedChainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFrozenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebalanceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ledgerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceBurnFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceMintFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedChainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChain2cctpMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLedgerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalanceOnchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBurnFrozenBalanceOnchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFrozenBalanceOnchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfrozenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ChangeLedgerEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceBurnEvent {
  export type InputTuple = [
    rebalanceId: BigNumberish,
    amount: BigNumberish,
    tokenHash: BytesLike,
    srcChainId: BigNumberish,
    dstChainId: BigNumberish
  ];
  export type OutputTuple = [
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    srcChainId: bigint,
    dstChainId: bigint
  ];
  export interface OutputObject {
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    srcChainId: bigint;
    dstChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceBurnResultEvent {
  export type InputTuple = [rebalanceId: BigNumberish, success: boolean];
  export type OutputTuple = [rebalanceId: bigint, success: boolean];
  export interface OutputObject {
    rebalanceId: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceMintEvent {
  export type InputTuple = [rebalanceId: BigNumberish];
  export type OutputTuple = [rebalanceId: bigint];
  export interface OutputObject {
    rebalanceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceMintResultEvent {
  export type InputTuple = [rebalanceId: BigNumberish, success: boolean];
  export type OutputTuple = [rebalanceId: bigint, success: boolean];
  export interface OutputObject {
    rebalanceId: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllowedBrokerEvent {
  export type InputTuple = [_brokerHash: BytesLike, _allowed: boolean];
  export type OutputTuple = [_brokerHash: string, _allowed: boolean];
  export interface OutputObject {
    _brokerHash: string;
    _allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllowedChainTokenEvent {
  export type InputTuple = [
    _tokenHash: BytesLike,
    _chainId: BigNumberish,
    _allowed: boolean
  ];
  export type OutputTuple = [
    _tokenHash: string,
    _chainId: bigint,
    _allowed: boolean
  ];
  export interface OutputObject {
    _tokenHash: string;
    _chainId: bigint;
    _allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllowedSymbolEvent {
  export type InputTuple = [_symbolHash: BytesLike, _allowed: boolean];
  export type OutputTuple = [_symbolHash: string, _allowed: boolean];
  export interface OutputObject {
    _symbolHash: string;
    _allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllowedTokenEvent {
  export type InputTuple = [_tokenHash: BytesLike, _allowed: boolean];
  export type OutputTuple = [_tokenHash: string, _allowed: boolean];
  export interface OutputObject {
    _tokenHash: string;
    _allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxWithdrawFeeEvent {
  export type InputTuple = [
    _tokenHash: BytesLike,
    _maxWithdrawFee: BigNumberish
  ];
  export type OutputTuple = [_tokenHash: string, _maxWithdrawFee: bigint];
  export interface OutputObject {
    _tokenHash: string;
    _maxWithdrawFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolVaultAddressEvent {
  export type InputTuple = [
    _oldProtocolVaultAddress: AddressLike,
    _newProtocolVaultAddress: AddressLike
  ];
  export type OutputTuple = [
    _oldProtocolVaultAddress: string,
    _newProtocolVaultAddress: string
  ];
  export interface OutputObject {
    _oldProtocolVaultAddress: string;
    _newProtocolVaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSymbolManagerEvent {
  export type InputTuple = [_symbolManager: AddressLike];
  export type OutputTuple = [_symbolManager: string];
  export interface OutputObject {
    _symbolManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultManager extends BaseContract {
  connect(runner?: ContractRunner | null): VaultManager;
  waitForDeployment(): Promise<this>;

  interface: VaultManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BROKER_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SYMBOL_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  addBalance: TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allowedChainToken: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  applyDeltaBalance: TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  chain2VaultAddress: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  chain2cctpDomain: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  executeRebalanceBurn: TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnUploadDataStruct],
    [[bigint, string]],
    "nonpayable"
  >;

  executeRebalanceMint: TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintUploadDataStruct],
    [void],
    "nonpayable"
  >;

  finishFrozenBalance: TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  frozenBalance: TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAllAllowedBroker: TypedContractMethod<[], [string[]], "view">;

  getAllAllowedSymbol: TypedContractMethod<[], [string[]], "view">;

  getAllAllowedToken: TypedContractMethod<[], [string[]], "view">;

  getAllowedBroker: TypedContractMethod<
    [_brokerHash: BytesLike],
    [boolean],
    "view"
  >;

  getAllowedChainToken: TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish],
    [boolean],
    "view"
  >;

  getAllowedSymbol: TypedContractMethod<
    [_symbolHash: BytesLike],
    [boolean],
    "view"
  >;

  getAllowedToken: TypedContractMethod<
    [_tokenHash: BytesLike],
    [boolean],
    "view"
  >;

  getBalance: TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish],
    [bigint],
    "view"
  >;

  getFrozenBalance: TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish],
    [bigint],
    "view"
  >;

  getMaxWithdrawFee: TypedContractMethod<
    [_tokenHash: BytesLike],
    [bigint],
    "view"
  >;

  getProtocolVaultAddress: TypedContractMethod<[], [string], "view">;

  getRebalanceStatus: TypedContractMethod<
    [rebalanceId: BigNumberish],
    [RebalanceTypes.RebalanceStatusStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  ledgerAddress: TypedContractMethod<[], [string], "view">;

  maxWithdrawFee: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rebalanceBurnFinish: TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnCCFinishDataStruct],
    [void],
    "nonpayable"
  >;

  rebalanceMintFinish: TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintCCFinishDataStruct],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAllowedBroker: TypedContractMethod<
    [_brokerHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setAllowedChainToken: TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setAllowedSymbol: TypedContractMethod<
    [_symbolHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setAllowedToken: TypedContractMethod<
    [_tokenHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setChain2cctpMeta: TypedContractMethod<
    [
      chainId: BigNumberish,
      cctpDomain: BigNumberish,
      vaultAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setLedgerAddress: TypedContractMethod<
    [_ledgerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxWithdrawFee: TypedContractMethod<
    [_tokenHash: BytesLike, _maxWithdrawFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolVaultAddress: TypedContractMethod<
    [_protocalVaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  subBalance: TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  tokenBalanceOnchain: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  tokenBurnFrozenBalanceOnchain: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  tokenFrozenBalanceOnchain: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unfrozenBalance: TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BROKER_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SYMBOL_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addBalance"
  ): TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowedChainToken"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "applyDeltaBalance"
  ): TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chain2VaultAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "chain2cctpDomain"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeRebalanceBurn"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnUploadDataStruct],
    [[bigint, string]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeRebalanceMint"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintUploadDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finishFrozenBalance"
  ): TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "frozenBalance"
  ): TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllAllowedBroker"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllAllowedSymbol"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllAllowedToken"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllowedBroker"
  ): TypedContractMethod<[_brokerHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllowedChainToken"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllowedSymbol"
  ): TypedContractMethod<[_symbolHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllowedToken"
  ): TypedContractMethod<[_tokenHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFrozenBalance"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxWithdrawFee"
  ): TypedContractMethod<[_tokenHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProtocolVaultAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRebalanceStatus"
  ): TypedContractMethod<
    [rebalanceId: BigNumberish],
    [RebalanceTypes.RebalanceStatusStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ledgerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxWithdrawFee"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebalanceBurnFinish"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnCCFinishDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalanceMintFinish"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintCCFinishDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowedBroker"
  ): TypedContractMethod<
    [_brokerHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowedChainToken"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _chainId: BigNumberish, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowedSymbol"
  ): TypedContractMethod<
    [_symbolHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowedToken"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChain2cctpMeta"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      cctpDomain: BigNumberish,
      vaultAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLedgerAddress"
  ): TypedContractMethod<[_ledgerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxWithdrawFee"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _maxWithdrawFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolVaultAddress"
  ): TypedContractMethod<
    [_protocalVaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subBalance"
  ): TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenBalanceOnchain"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenBurnFrozenBalanceOnchain"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenFrozenBalanceOnchain"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unfrozenBalance"
  ): TypedContractMethod<
    [
      _tokenHash: BytesLike,
      _chainId: BigNumberish,
      _deltaBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ChangeLedger"
  ): TypedContractEvent<
    ChangeLedgerEvent.InputTuple,
    ChangeLedgerEvent.OutputTuple,
    ChangeLedgerEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceBurn"
  ): TypedContractEvent<
    RebalanceBurnEvent.InputTuple,
    RebalanceBurnEvent.OutputTuple,
    RebalanceBurnEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceBurnResult"
  ): TypedContractEvent<
    RebalanceBurnResultEvent.InputTuple,
    RebalanceBurnResultEvent.OutputTuple,
    RebalanceBurnResultEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceMint"
  ): TypedContractEvent<
    RebalanceMintEvent.InputTuple,
    RebalanceMintEvent.OutputTuple,
    RebalanceMintEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceMintResult"
  ): TypedContractEvent<
    RebalanceMintResultEvent.InputTuple,
    RebalanceMintResultEvent.OutputTuple,
    RebalanceMintResultEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetAllowedBroker"
  ): TypedContractEvent<
    SetAllowedBrokerEvent.InputTuple,
    SetAllowedBrokerEvent.OutputTuple,
    SetAllowedBrokerEvent.OutputObject
  >;
  getEvent(
    key: "SetAllowedChainToken"
  ): TypedContractEvent<
    SetAllowedChainTokenEvent.InputTuple,
    SetAllowedChainTokenEvent.OutputTuple,
    SetAllowedChainTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetAllowedSymbol"
  ): TypedContractEvent<
    SetAllowedSymbolEvent.InputTuple,
    SetAllowedSymbolEvent.OutputTuple,
    SetAllowedSymbolEvent.OutputObject
  >;
  getEvent(
    key: "SetAllowedToken"
  ): TypedContractEvent<
    SetAllowedTokenEvent.InputTuple,
    SetAllowedTokenEvent.OutputTuple,
    SetAllowedTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxWithdrawFee"
  ): TypedContractEvent<
    SetMaxWithdrawFeeEvent.InputTuple,
    SetMaxWithdrawFeeEvent.OutputTuple,
    SetMaxWithdrawFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolVaultAddress"
  ): TypedContractEvent<
    SetProtocolVaultAddressEvent.InputTuple,
    SetProtocolVaultAddressEvent.OutputTuple,
    SetProtocolVaultAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetSymbolManager"
  ): TypedContractEvent<
    SetSymbolManagerEvent.InputTuple,
    SetSymbolManagerEvent.OutputTuple,
    SetSymbolManagerEvent.OutputObject
  >;

  filters: {
    "ChangeLedger(address,address)": TypedContractEvent<
      ChangeLedgerEvent.InputTuple,
      ChangeLedgerEvent.OutputTuple,
      ChangeLedgerEvent.OutputObject
    >;
    ChangeLedger: TypedContractEvent<
      ChangeLedgerEvent.InputTuple,
      ChangeLedgerEvent.OutputTuple,
      ChangeLedgerEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RebalanceBurn(uint64,uint128,bytes32,uint256,uint256)": TypedContractEvent<
      RebalanceBurnEvent.InputTuple,
      RebalanceBurnEvent.OutputTuple,
      RebalanceBurnEvent.OutputObject
    >;
    RebalanceBurn: TypedContractEvent<
      RebalanceBurnEvent.InputTuple,
      RebalanceBurnEvent.OutputTuple,
      RebalanceBurnEvent.OutputObject
    >;

    "RebalanceBurnResult(uint64,bool)": TypedContractEvent<
      RebalanceBurnResultEvent.InputTuple,
      RebalanceBurnResultEvent.OutputTuple,
      RebalanceBurnResultEvent.OutputObject
    >;
    RebalanceBurnResult: TypedContractEvent<
      RebalanceBurnResultEvent.InputTuple,
      RebalanceBurnResultEvent.OutputTuple,
      RebalanceBurnResultEvent.OutputObject
    >;

    "RebalanceMint(uint64)": TypedContractEvent<
      RebalanceMintEvent.InputTuple,
      RebalanceMintEvent.OutputTuple,
      RebalanceMintEvent.OutputObject
    >;
    RebalanceMint: TypedContractEvent<
      RebalanceMintEvent.InputTuple,
      RebalanceMintEvent.OutputTuple,
      RebalanceMintEvent.OutputObject
    >;

    "RebalanceMintResult(uint64,bool)": TypedContractEvent<
      RebalanceMintResultEvent.InputTuple,
      RebalanceMintResultEvent.OutputTuple,
      RebalanceMintResultEvent.OutputObject
    >;
    RebalanceMintResult: TypedContractEvent<
      RebalanceMintResultEvent.InputTuple,
      RebalanceMintResultEvent.OutputTuple,
      RebalanceMintResultEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetAllowedBroker(bytes32,bool)": TypedContractEvent<
      SetAllowedBrokerEvent.InputTuple,
      SetAllowedBrokerEvent.OutputTuple,
      SetAllowedBrokerEvent.OutputObject
    >;
    SetAllowedBroker: TypedContractEvent<
      SetAllowedBrokerEvent.InputTuple,
      SetAllowedBrokerEvent.OutputTuple,
      SetAllowedBrokerEvent.OutputObject
    >;

    "SetAllowedChainToken(bytes32,uint256,bool)": TypedContractEvent<
      SetAllowedChainTokenEvent.InputTuple,
      SetAllowedChainTokenEvent.OutputTuple,
      SetAllowedChainTokenEvent.OutputObject
    >;
    SetAllowedChainToken: TypedContractEvent<
      SetAllowedChainTokenEvent.InputTuple,
      SetAllowedChainTokenEvent.OutputTuple,
      SetAllowedChainTokenEvent.OutputObject
    >;

    "SetAllowedSymbol(bytes32,bool)": TypedContractEvent<
      SetAllowedSymbolEvent.InputTuple,
      SetAllowedSymbolEvent.OutputTuple,
      SetAllowedSymbolEvent.OutputObject
    >;
    SetAllowedSymbol: TypedContractEvent<
      SetAllowedSymbolEvent.InputTuple,
      SetAllowedSymbolEvent.OutputTuple,
      SetAllowedSymbolEvent.OutputObject
    >;

    "SetAllowedToken(bytes32,bool)": TypedContractEvent<
      SetAllowedTokenEvent.InputTuple,
      SetAllowedTokenEvent.OutputTuple,
      SetAllowedTokenEvent.OutputObject
    >;
    SetAllowedToken: TypedContractEvent<
      SetAllowedTokenEvent.InputTuple,
      SetAllowedTokenEvent.OutputTuple,
      SetAllowedTokenEvent.OutputObject
    >;

    "SetMaxWithdrawFee(bytes32,uint128)": TypedContractEvent<
      SetMaxWithdrawFeeEvent.InputTuple,
      SetMaxWithdrawFeeEvent.OutputTuple,
      SetMaxWithdrawFeeEvent.OutputObject
    >;
    SetMaxWithdrawFee: TypedContractEvent<
      SetMaxWithdrawFeeEvent.InputTuple,
      SetMaxWithdrawFeeEvent.OutputTuple,
      SetMaxWithdrawFeeEvent.OutputObject
    >;

    "SetProtocolVaultAddress(address,address)": TypedContractEvent<
      SetProtocolVaultAddressEvent.InputTuple,
      SetProtocolVaultAddressEvent.OutputTuple,
      SetProtocolVaultAddressEvent.OutputObject
    >;
    SetProtocolVaultAddress: TypedContractEvent<
      SetProtocolVaultAddressEvent.InputTuple,
      SetProtocolVaultAddressEvent.OutputTuple,
      SetProtocolVaultAddressEvent.OutputObject
    >;

    "SetSymbolManager(address)": TypedContractEvent<
      SetSymbolManagerEvent.InputTuple,
      SetSymbolManagerEvent.OutputTuple,
      SetSymbolManagerEvent.OutputObject
    >;
    SetSymbolManager: TypedContractEvent<
      SetSymbolManagerEvent.InputTuple,
      SetSymbolManagerEvent.OutputTuple,
      SetSymbolManagerEvent.OutputObject
    >;
  };
}
