/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VaultTypes {
  export type VaultDelegateStruct = {
    brokerHash: BytesLike;
    delegateSigner: AddressLike;
  };

  export type VaultDelegateStructOutput = [
    brokerHash: string,
    delegateSigner: string
  ] & { brokerHash: string; delegateSigner: string };

  export type DelegateSwapStruct = {
    tradeId: BytesLike;
    chainId: BigNumberish;
    inTokenHash: BytesLike;
    inTokenAmount: BigNumberish;
    to: AddressLike;
    value: BigNumberish;
    swapCalldata: BytesLike;
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
  };

  export type DelegateSwapStructOutput = [
    tradeId: string,
    chainId: bigint,
    inTokenHash: string,
    inTokenAmount: bigint,
    to: string,
    value: bigint,
    swapCalldata: string,
    r: string,
    s: string,
    v: bigint
  ] & {
    tradeId: string;
    chainId: bigint;
    inTokenHash: string;
    inTokenAmount: bigint;
    to: string;
    value: bigint;
    swapCalldata: string;
    r: string;
    s: string;
    v: bigint;
  };

  export type VaultDepositFEStruct = {
    accountId: BytesLike;
    brokerHash: BytesLike;
    tokenHash: BytesLike;
    tokenAmount: BigNumberish;
  };

  export type VaultDepositFEStructOutput = [
    accountId: string,
    brokerHash: string,
    tokenHash: string,
    tokenAmount: bigint
  ] & {
    accountId: string;
    brokerHash: string;
    tokenHash: string;
    tokenAmount: bigint;
  };

  export type VaultWithdrawStruct = {
    accountId: BytesLike;
    brokerHash: BytesLike;
    tokenHash: BytesLike;
    tokenAmount: BigNumberish;
    fee: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    withdrawNonce: BigNumberish;
  };

  export type VaultWithdrawStructOutput = [
    accountId: string,
    brokerHash: string,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    sender: string,
    receiver: string,
    withdrawNonce: bigint
  ] & {
    accountId: string;
    brokerHash: string;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    sender: string;
    receiver: string;
    withdrawNonce: bigint;
  };

  export type VaultWithdraw2ContractStruct = {
    vaultType: BigNumberish;
    accountId: BytesLike;
    brokerHash: BytesLike;
    tokenHash: BytesLike;
    tokenAmount: BigNumberish;
    fee: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    withdrawNonce: BigNumberish;
    clientId: BigNumberish;
  };

  export type VaultWithdraw2ContractStructOutput = [
    vaultType: bigint,
    accountId: string,
    brokerHash: string,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    sender: string,
    receiver: string,
    withdrawNonce: bigint,
    clientId: bigint
  ] & {
    vaultType: bigint;
    accountId: string;
    brokerHash: string;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    sender: string;
    receiver: string;
    withdrawNonce: bigint;
    clientId: bigint;
  };
}

export declare namespace RebalanceTypes {
  export type RebalanceBurnCCDataStruct = {
    dstDomain: BigNumberish;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
    dstVaultAddress: AddressLike;
  };

  export type RebalanceBurnCCDataStructOutput = [
    dstDomain: bigint,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint,
    dstVaultAddress: string
  ] & {
    dstDomain: bigint;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
    dstVaultAddress: string;
  };

  export type RebalanceMintCCDataStruct = {
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
    messageBytes: BytesLike;
    messageSignature: BytesLike;
  };

  export type RebalanceMintCCDataStructOutput = [
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint,
    messageBytes: string,
    messageSignature: string
  ] & {
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
    messageBytes: string;
    messageSignature: string;
  };
}

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BROKER_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SYMBOL_MANAGER_ROLE"
      | "allowedToken"
      | "changeTokenAddressAndAllow"
      | "crossChainManagerAddress"
      | "delegateSigner"
      | "delegateSwap"
      | "deposit"
      | "depositFeeEnabled"
      | "depositId"
      | "depositTo"
      | "emergencyPause"
      | "emergencyUnpause"
      | "enableDepositFee"
      | "getAllAllowedBroker"
      | "getAllAllowedToken"
      | "getAllRebalanceEnableToken"
      | "getAllowedBroker"
      | "getAllowedToken"
      | "getDepositFee"
      | "getRoleAdmin"
      | "getSubmittedSwaps"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isSwapSubmitted"
      | "messageTransmitterContract"
      | "nativeTokenDepositLimit"
      | "nativeTokenHash"
      | "owner"
      | "paused"
      | "protocolVault"
      | "rebalanceBurn"
      | "rebalanceMint"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setAllowedBroker"
      | "setAllowedToken"
      | "setCrossChainManager"
      | "setDepositLimit"
      | "setNativeTokenDepositLimit"
      | "setNativeTokenHash"
      | "setProtocolVaultAddress"
      | "setRebalanceEnableToken"
      | "setRebalanceMessengerContract"
      | "setSwapOperator"
      | "setSwapSigner"
      | "setTokenMessengerContract"
      | "swapOperator"
      | "swapSigner"
      | "tokenAddress2DepositLimit"
      | "tokenMessengerContract"
      | "transferOwnership"
      | "version"
      | "withdraw"
      | "withdraw2Contract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountDelegate"
      | "AccountDeposit"
      | "AccountDepositTo"
      | "AccountWithdraw"
      | "ChangeCrossChainManager"
      | "ChangeDepositLimit"
      | "ChangeTokenAddressAndAllow"
      | "DelegateSwapExecuted"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetAllowedBroker"
      | "SetAllowedToken"
      | "SetCeffuAddress"
      | "SetProtocolVaultAddress"
      | "SetRebalanceEnableToken"
      | "Unpaused"
      | "WithdrawFailed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BROKER_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenAddressAndAllow",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateSigner",
    values: [VaultTypes.VaultDelegateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateSwap",
    values: [VaultTypes.DelegateSwapStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [VaultTypes.VaultDepositFEStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFeeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "depositId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [AddressLike, VaultTypes.VaultDepositFEStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableDepositFee",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAllowedBroker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAllowedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRebalanceEnableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedBroker",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositFee",
    values: [AddressLike, VaultTypes.VaultDepositFEStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmittedSwaps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapSubmitted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messageTransmitterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokenDepositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokenHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceBurn",
    values: [RebalanceTypes.RebalanceBurnCCDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceMint",
    values: [RebalanceTypes.RebalanceMintCCDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedBroker",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToken",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossChainManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativeTokenDepositLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativeTokenHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolVaultAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceEnableToken",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceMessengerContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMessengerContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress2DepositLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMessengerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [VaultTypes.VaultWithdrawStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw2Contract",
    values: [VaultTypes.VaultWithdraw2ContractStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "BROKER_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenAddressAndAllow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAllowedBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRebalanceEnableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmittedSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSwapSubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageTransmitterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedBroker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossChainManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativeTokenDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativeTokenHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceEnableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceMessengerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMessengerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress2DepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMessengerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw2Contract",
    data: BytesLike
  ): Result;
}

export namespace AccountDelegateEvent {
  export type InputTuple = [
    delegateContract: AddressLike,
    brokerHash: BytesLike,
    delegateSigner: AddressLike,
    chainId: BigNumberish,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    delegateContract: string,
    brokerHash: string,
    delegateSigner: string,
    chainId: bigint,
    blockNumber: bigint
  ];
  export interface OutputObject {
    delegateContract: string;
    brokerHash: string;
    delegateSigner: string;
    chainId: bigint;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountDepositEvent {
  export type InputTuple = [
    accountId: BytesLike,
    userAddress: AddressLike,
    depositNonce: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    userAddress: string,
    depositNonce: bigint,
    tokenHash: string,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    accountId: string;
    userAddress: string;
    depositNonce: bigint;
    tokenHash: string;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountDepositToEvent {
  export type InputTuple = [
    accountId: BytesLike,
    userAddress: AddressLike,
    depositNonce: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    userAddress: string,
    depositNonce: bigint,
    tokenHash: string,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    accountId: string;
    userAddress: string;
    depositNonce: bigint;
    tokenHash: string;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawEvent {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    brokerHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCrossChainManagerEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeDepositLimitEvent {
  export type InputTuple = [_tokenAddress: AddressLike, _limit: BigNumberish];
  export type OutputTuple = [_tokenAddress: string, _limit: bigint];
  export interface OutputObject {
    _tokenAddress: string;
    _limit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeTokenAddressAndAllowEvent {
  export type InputTuple = [_tokenHash: BytesLike, _tokenAddress: AddressLike];
  export type OutputTuple = [_tokenHash: string, _tokenAddress: string];
  export interface OutputObject {
    _tokenHash: string;
    _tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateSwapExecutedEvent {
  export type InputTuple = [
    tradeId: BytesLike,
    inTokenHash: BytesLike,
    inTokenAmount: BigNumberish,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: string,
    inTokenHash: string,
    inTokenAmount: bigint,
    to: string,
    value: bigint
  ];
  export interface OutputObject {
    tradeId: string;
    inTokenHash: string;
    inTokenAmount: bigint;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllowedBrokerEvent {
  export type InputTuple = [_brokerHash: BytesLike, _allowed: boolean];
  export type OutputTuple = [_brokerHash: string, _allowed: boolean];
  export interface OutputObject {
    _brokerHash: string;
    _allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAllowedTokenEvent {
  export type InputTuple = [_tokenHash: BytesLike, _allowed: boolean];
  export type OutputTuple = [_tokenHash: string, _allowed: boolean];
  export interface OutputObject {
    _tokenHash: string;
    _allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCeffuAddressEvent {
  export type InputTuple = [
    _oldCeffuAddress: AddressLike,
    _newCeffuAddress: AddressLike
  ];
  export type OutputTuple = [
    _oldCeffuAddress: string,
    _newCeffuAddress: string
  ];
  export interface OutputObject {
    _oldCeffuAddress: string;
    _newCeffuAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolVaultAddressEvent {
  export type InputTuple = [
    _oldProtocolVaultAddress: AddressLike,
    _newProtocolVaultAddress: AddressLike
  ];
  export type OutputTuple = [
    _oldProtocolVaultAddress: string,
    _newProtocolVaultAddress: string
  ];
  export interface OutputObject {
    _oldProtocolVaultAddress: string;
    _newProtocolVaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRebalanceEnableTokenEvent {
  export type InputTuple = [_tokenHash: BytesLike, _allowed: boolean];
  export type OutputTuple = [_tokenHash: string, _allowed: boolean];
  export interface OutputObject {
    _tokenHash: string;
    _allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFailedEvent {
  export type InputTuple = [
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, receiver: string, amount: bigint];
  export interface OutputObject {
    token: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BROKER_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SYMBOL_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  allowedToken: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  changeTokenAddressAndAllow: TypedContractMethod<
    [_tokenHash: BytesLike, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  crossChainManagerAddress: TypedContractMethod<[], [string], "view">;

  delegateSigner: TypedContractMethod<
    [data: VaultTypes.VaultDelegateStruct],
    [void],
    "nonpayable"
  >;

  delegateSwap: TypedContractMethod<
    [data: VaultTypes.DelegateSwapStruct],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [data: VaultTypes.VaultDepositFEStruct],
    [void],
    "payable"
  >;

  depositFeeEnabled: TypedContractMethod<[], [boolean], "view">;

  depositId: TypedContractMethod<[], [bigint], "view">;

  depositTo: TypedContractMethod<
    [receiver: AddressLike, data: VaultTypes.VaultDepositFEStruct],
    [void],
    "payable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  enableDepositFee: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  getAllAllowedBroker: TypedContractMethod<[], [string[]], "view">;

  getAllAllowedToken: TypedContractMethod<[], [string[]], "view">;

  getAllRebalanceEnableToken: TypedContractMethod<[], [string[]], "view">;

  getAllowedBroker: TypedContractMethod<
    [_brokerHash: BytesLike],
    [boolean],
    "view"
  >;

  getAllowedToken: TypedContractMethod<
    [_tokenHash: BytesLike],
    [string],
    "view"
  >;

  getDepositFee: TypedContractMethod<
    [receiver: AddressLike, data: VaultTypes.VaultDepositFEStruct],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSubmittedSwaps: TypedContractMethod<[], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isSwapSubmitted: TypedContractMethod<[tradeId: BytesLike], [boolean], "view">;

  messageTransmitterContract: TypedContractMethod<[], [string], "view">;

  nativeTokenDepositLimit: TypedContractMethod<[], [bigint], "view">;

  nativeTokenHash: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  protocolVault: TypedContractMethod<[], [string], "view">;

  rebalanceBurn: TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnCCDataStruct],
    [void],
    "nonpayable"
  >;

  rebalanceMint: TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintCCDataStruct],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAllowedBroker: TypedContractMethod<
    [_brokerHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setAllowedToken: TypedContractMethod<
    [_tokenHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setCrossChainManager: TypedContractMethod<
    [_crossChainManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setDepositLimit: TypedContractMethod<
    [_tokenAddress: AddressLike, _limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNativeTokenDepositLimit: TypedContractMethod<
    [_nativeTokenDepositLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNativeTokenHash: TypedContractMethod<
    [_nativeTokenHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setProtocolVaultAddress: TypedContractMethod<
    [_protocolVaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setRebalanceEnableToken: TypedContractMethod<
    [_tokenHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setRebalanceMessengerContract: TypedContractMethod<
    [_rebalanceMessengerContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapOperator: TypedContractMethod<
    [_swapOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapSigner: TypedContractMethod<
    [_swapSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenMessengerContract: TypedContractMethod<
    [_tokenMessengerContract: AddressLike],
    [void],
    "nonpayable"
  >;

  swapOperator: TypedContractMethod<[], [string], "view">;

  swapSigner: TypedContractMethod<[], [string], "view">;

  tokenAddress2DepositLimit: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  tokenMessengerContract: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [data: VaultTypes.VaultWithdrawStruct],
    [void],
    "nonpayable"
  >;

  withdraw2Contract: TypedContractMethod<
    [data: VaultTypes.VaultWithdraw2ContractStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BROKER_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SYMBOL_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowedToken"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "changeTokenAddressAndAllow"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "crossChainManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "delegateSigner"
  ): TypedContractMethod<
    [data: VaultTypes.VaultDelegateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateSwap"
  ): TypedContractMethod<
    [data: VaultTypes.DelegateSwapStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [data: VaultTypes.VaultDepositFEStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositFeeEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "depositId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositTo"
  ): TypedContractMethod<
    [receiver: AddressLike, data: VaultTypes.VaultDepositFEStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableDepositFee"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllAllowedBroker"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllAllowedToken"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllRebalanceEnableToken"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllowedBroker"
  ): TypedContractMethod<[_brokerHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllowedToken"
  ): TypedContractMethod<[_tokenHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDepositFee"
  ): TypedContractMethod<
    [receiver: AddressLike, data: VaultTypes.VaultDepositFEStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSubmittedSwaps"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isSwapSubmitted"
  ): TypedContractMethod<[tradeId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "messageTransmitterContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nativeTokenDepositLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nativeTokenHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebalanceBurn"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnCCDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalanceMint"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintCCDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowedBroker"
  ): TypedContractMethod<
    [_brokerHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowedToken"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCrossChainManager"
  ): TypedContractMethod<
    [_crossChainManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDepositLimit"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNativeTokenDepositLimit"
  ): TypedContractMethod<
    [_nativeTokenDepositLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNativeTokenHash"
  ): TypedContractMethod<[_nativeTokenHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolVaultAddress"
  ): TypedContractMethod<
    [_protocolVaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRebalanceEnableToken"
  ): TypedContractMethod<
    [_tokenHash: BytesLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRebalanceMessengerContract"
  ): TypedContractMethod<
    [_rebalanceMessengerContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapOperator"
  ): TypedContractMethod<[_swapOperator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapSigner"
  ): TypedContractMethod<[_swapSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenMessengerContract"
  ): TypedContractMethod<
    [_tokenMessengerContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapOperator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenAddress2DepositLimit"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenMessengerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [data: VaultTypes.VaultWithdrawStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw2Contract"
  ): TypedContractMethod<
    [data: VaultTypes.VaultWithdraw2ContractStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccountDelegate"
  ): TypedContractEvent<
    AccountDelegateEvent.InputTuple,
    AccountDelegateEvent.OutputTuple,
    AccountDelegateEvent.OutputObject
  >;
  getEvent(
    key: "AccountDeposit"
  ): TypedContractEvent<
    AccountDepositEvent.InputTuple,
    AccountDepositEvent.OutputTuple,
    AccountDepositEvent.OutputObject
  >;
  getEvent(
    key: "AccountDepositTo"
  ): TypedContractEvent<
    AccountDepositToEvent.InputTuple,
    AccountDepositToEvent.OutputTuple,
    AccountDepositToEvent.OutputObject
  >;
  getEvent(
    key: "AccountWithdraw"
  ): TypedContractEvent<
    AccountWithdrawEvent.InputTuple,
    AccountWithdrawEvent.OutputTuple,
    AccountWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCrossChainManager"
  ): TypedContractEvent<
    ChangeCrossChainManagerEvent.InputTuple,
    ChangeCrossChainManagerEvent.OutputTuple,
    ChangeCrossChainManagerEvent.OutputObject
  >;
  getEvent(
    key: "ChangeDepositLimit"
  ): TypedContractEvent<
    ChangeDepositLimitEvent.InputTuple,
    ChangeDepositLimitEvent.OutputTuple,
    ChangeDepositLimitEvent.OutputObject
  >;
  getEvent(
    key: "ChangeTokenAddressAndAllow"
  ): TypedContractEvent<
    ChangeTokenAddressAndAllowEvent.InputTuple,
    ChangeTokenAddressAndAllowEvent.OutputTuple,
    ChangeTokenAddressAndAllowEvent.OutputObject
  >;
  getEvent(
    key: "DelegateSwapExecuted"
  ): TypedContractEvent<
    DelegateSwapExecutedEvent.InputTuple,
    DelegateSwapExecutedEvent.OutputTuple,
    DelegateSwapExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetAllowedBroker"
  ): TypedContractEvent<
    SetAllowedBrokerEvent.InputTuple,
    SetAllowedBrokerEvent.OutputTuple,
    SetAllowedBrokerEvent.OutputObject
  >;
  getEvent(
    key: "SetAllowedToken"
  ): TypedContractEvent<
    SetAllowedTokenEvent.InputTuple,
    SetAllowedTokenEvent.OutputTuple,
    SetAllowedTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetCeffuAddress"
  ): TypedContractEvent<
    SetCeffuAddressEvent.InputTuple,
    SetCeffuAddressEvent.OutputTuple,
    SetCeffuAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolVaultAddress"
  ): TypedContractEvent<
    SetProtocolVaultAddressEvent.InputTuple,
    SetProtocolVaultAddressEvent.OutputTuple,
    SetProtocolVaultAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetRebalanceEnableToken"
  ): TypedContractEvent<
    SetRebalanceEnableTokenEvent.InputTuple,
    SetRebalanceEnableTokenEvent.OutputTuple,
    SetRebalanceEnableTokenEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFailed"
  ): TypedContractEvent<
    WithdrawFailedEvent.InputTuple,
    WithdrawFailedEvent.OutputTuple,
    WithdrawFailedEvent.OutputObject
  >;

  filters: {
    "AccountDelegate(address,bytes32,address,uint256,uint256)": TypedContractEvent<
      AccountDelegateEvent.InputTuple,
      AccountDelegateEvent.OutputTuple,
      AccountDelegateEvent.OutputObject
    >;
    AccountDelegate: TypedContractEvent<
      AccountDelegateEvent.InputTuple,
      AccountDelegateEvent.OutputTuple,
      AccountDelegateEvent.OutputObject
    >;

    "AccountDeposit(bytes32,address,uint64,bytes32,uint128)": TypedContractEvent<
      AccountDepositEvent.InputTuple,
      AccountDepositEvent.OutputTuple,
      AccountDepositEvent.OutputObject
    >;
    AccountDeposit: TypedContractEvent<
      AccountDepositEvent.InputTuple,
      AccountDepositEvent.OutputTuple,
      AccountDepositEvent.OutputObject
    >;

    "AccountDepositTo(bytes32,address,uint64,bytes32,uint128)": TypedContractEvent<
      AccountDepositToEvent.InputTuple,
      AccountDepositToEvent.OutputTuple,
      AccountDepositToEvent.OutputObject
    >;
    AccountDepositTo: TypedContractEvent<
      AccountDepositToEvent.InputTuple,
      AccountDepositToEvent.OutputTuple,
      AccountDepositToEvent.OutputObject
    >;

    "AccountWithdraw(bytes32,uint64,bytes32,address,address,bytes32,uint128,uint128)": TypedContractEvent<
      AccountWithdrawEvent.InputTuple,
      AccountWithdrawEvent.OutputTuple,
      AccountWithdrawEvent.OutputObject
    >;
    AccountWithdraw: TypedContractEvent<
      AccountWithdrawEvent.InputTuple,
      AccountWithdrawEvent.OutputTuple,
      AccountWithdrawEvent.OutputObject
    >;

    "ChangeCrossChainManager(address,address)": TypedContractEvent<
      ChangeCrossChainManagerEvent.InputTuple,
      ChangeCrossChainManagerEvent.OutputTuple,
      ChangeCrossChainManagerEvent.OutputObject
    >;
    ChangeCrossChainManager: TypedContractEvent<
      ChangeCrossChainManagerEvent.InputTuple,
      ChangeCrossChainManagerEvent.OutputTuple,
      ChangeCrossChainManagerEvent.OutputObject
    >;

    "ChangeDepositLimit(address,uint256)": TypedContractEvent<
      ChangeDepositLimitEvent.InputTuple,
      ChangeDepositLimitEvent.OutputTuple,
      ChangeDepositLimitEvent.OutputObject
    >;
    ChangeDepositLimit: TypedContractEvent<
      ChangeDepositLimitEvent.InputTuple,
      ChangeDepositLimitEvent.OutputTuple,
      ChangeDepositLimitEvent.OutputObject
    >;

    "ChangeTokenAddressAndAllow(bytes32,address)": TypedContractEvent<
      ChangeTokenAddressAndAllowEvent.InputTuple,
      ChangeTokenAddressAndAllowEvent.OutputTuple,
      ChangeTokenAddressAndAllowEvent.OutputObject
    >;
    ChangeTokenAddressAndAllow: TypedContractEvent<
      ChangeTokenAddressAndAllowEvent.InputTuple,
      ChangeTokenAddressAndAllowEvent.OutputTuple,
      ChangeTokenAddressAndAllowEvent.OutputObject
    >;

    "DelegateSwapExecuted(bytes32,bytes32,uint256,address,uint256)": TypedContractEvent<
      DelegateSwapExecutedEvent.InputTuple,
      DelegateSwapExecutedEvent.OutputTuple,
      DelegateSwapExecutedEvent.OutputObject
    >;
    DelegateSwapExecuted: TypedContractEvent<
      DelegateSwapExecutedEvent.InputTuple,
      DelegateSwapExecutedEvent.OutputTuple,
      DelegateSwapExecutedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetAllowedBroker(bytes32,bool)": TypedContractEvent<
      SetAllowedBrokerEvent.InputTuple,
      SetAllowedBrokerEvent.OutputTuple,
      SetAllowedBrokerEvent.OutputObject
    >;
    SetAllowedBroker: TypedContractEvent<
      SetAllowedBrokerEvent.InputTuple,
      SetAllowedBrokerEvent.OutputTuple,
      SetAllowedBrokerEvent.OutputObject
    >;

    "SetAllowedToken(bytes32,bool)": TypedContractEvent<
      SetAllowedTokenEvent.InputTuple,
      SetAllowedTokenEvent.OutputTuple,
      SetAllowedTokenEvent.OutputObject
    >;
    SetAllowedToken: TypedContractEvent<
      SetAllowedTokenEvent.InputTuple,
      SetAllowedTokenEvent.OutputTuple,
      SetAllowedTokenEvent.OutputObject
    >;

    "SetCeffuAddress(address,address)": TypedContractEvent<
      SetCeffuAddressEvent.InputTuple,
      SetCeffuAddressEvent.OutputTuple,
      SetCeffuAddressEvent.OutputObject
    >;
    SetCeffuAddress: TypedContractEvent<
      SetCeffuAddressEvent.InputTuple,
      SetCeffuAddressEvent.OutputTuple,
      SetCeffuAddressEvent.OutputObject
    >;

    "SetProtocolVaultAddress(address,address)": TypedContractEvent<
      SetProtocolVaultAddressEvent.InputTuple,
      SetProtocolVaultAddressEvent.OutputTuple,
      SetProtocolVaultAddressEvent.OutputObject
    >;
    SetProtocolVaultAddress: TypedContractEvent<
      SetProtocolVaultAddressEvent.InputTuple,
      SetProtocolVaultAddressEvent.OutputTuple,
      SetProtocolVaultAddressEvent.OutputObject
    >;

    "SetRebalanceEnableToken(bytes32,bool)": TypedContractEvent<
      SetRebalanceEnableTokenEvent.InputTuple,
      SetRebalanceEnableTokenEvent.OutputTuple,
      SetRebalanceEnableTokenEvent.OutputObject
    >;
    SetRebalanceEnableToken: TypedContractEvent<
      SetRebalanceEnableTokenEvent.InputTuple,
      SetRebalanceEnableTokenEvent.OutputTuple,
      SetRebalanceEnableTokenEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WithdrawFailed(address,address,uint256)": TypedContractEvent<
      WithdrawFailedEvent.InputTuple,
      WithdrawFailedEvent.OutputTuple,
      WithdrawFailedEvent.OutputObject
    >;
    WithdrawFailed: TypedContractEvent<
      WithdrawFailedEvent.InputTuple,
      WithdrawFailedEvent.OutputTuple,
      WithdrawFailedEvent.OutputObject
    >;
  };
}
