// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and account management
model User {
  id        String   @id @default(uuid())
  address   String   @unique
  nonce     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdmin   Boolean  @default(false)

  // User can have many auth tokens
  tokens    Token[]
  
  // User can have only one DEX
  dex       Dex?

  @@index([address])
}

// Token model for authentication
model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relation to User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// Dex model for storing DEX configurations
model Dex {
  id                   String   @id @default(uuid())
  brokerId             String   @default("demo") // Set by admin later, defaults to "demo"
  brokerName           String   @default("Orderly DEX") // Broker name with default value
  chainIds             Int[]    @default([]) // Array of chain IDs that the DEX should support
  defaultChain         Int?     // Default chain ID for the DEX
  primaryLogo          String?  // Base64-encoded primary logo data
  secondaryLogo        String?  // Base64-encoded secondary logo data
  favicon              String?  // Base64-encoded favicon data
  pnlPosters           String[] @default([]) // Array of base64-encoded PnL poster images
  themeCSS             String?  // Theme CSS content
  telegramLink         String?
  discordLink          String?
  xLink                String?  // Twitter/X link
  walletConnectProjectId String? // WalletConnect Project ID for the DEX
  privyAppId           String?  // Privy App ID for wallet connection
  privyTermsOfUse      String?  // Privy Terms of Use URL
  enabledMenus         String?  // Comma-separated list of enabled navigation menus
  customMenus          String?  // Semicolon-separated list of custom menu items (format: "Name,URL;Name2,URL2")
  repoUrl              String?  // GitHub repository URL after forking
  customDomain         String?  // Custom domain for GitHub Pages
  preferredBrokerId    String?  // User's preferred broker ID after verification
  makerFee             Int?     // Maker fee in basis points (0.01%)
  takerFee             Int?     // Taker fee in basis points (0.01%)
  availableLanguages   String[] @default(["en"]) // Array of language codes that the DEX should support
  enableCampaigns      Boolean  @default(false) // Flag to enable ORDER token campaigns and related features
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  enableAbstractWallet Boolean  @default(false) // New flag for Abstract Wallet
  disableMainnet       Boolean  @default(false) // Flag to disable mainnet chains
  disableTestnet       Boolean  @default(false) // Flag to disable testnet chains
  disableEvmWallets    Boolean  @default(false) // Flag to disable EVM wallets
  disableSolanaWallets Boolean  @default(false) // Flag to disable Solana wallets
  tradingViewColorConfig String? // TradingView color configuration JSON
  seoSiteName          String?  // SEO Site Name
  seoSiteDescription   String?  // SEO Site Description
  seoSiteLanguage      String?  // SEO Site Language (e.g., "en")
  seoSiteLocale        String?  // SEO Site Locale (e.g., "en_US")
  seoTwitterHandle     String?  // SEO Twitter Handle (e.g., "@orderly_network")
  seoThemeColor        String?  // SEO Theme Color (e.g., "#1a1b23")
  seoKeywords          String?  // SEO Keywords

  // Relation to User
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
