// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and account management
model User {
  id        String   @id @default(uuid())
  address   String   @unique
  nonce     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdmin   Boolean  @default(false)

  // User can have many auth tokens
  tokens    Token[]
  
  // User can have only one DEX
  dex       Dex?

  @@index([address])
}

// Token model for authentication
model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relation to User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// Dex model for storing DEX configurations
model Dex {
  id            String   @id @default(uuid())
  brokerId      String   @default("demo") // Set by admin later, defaults to "demo"
  brokerName    String   @default("Orderly DEX") // Broker name with default value
  primaryLogo   String?  // Base64-encoded primary logo data
  secondaryLogo String?  // Base64-encoded secondary logo data
  favicon       String?  // Base64-encoded favicon data
  themeCSS      String?  // Theme CSS content
  telegramLink  String?
  discordLink   String?
  xLink         String?  // Twitter/X link
  repoUrl       String?  // GitHub repository URL after forking
  customDomain  String?  // Custom domain for GitHub Pages
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relation to User (owner) - one-to-one relationship
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
